# !/usr/local/bin/ python
# -*- coding:utf-8 -*-

"""
    文件缓冲
    将文件内容写入到硬件设备时，使用系统调用，这类IO操作的时间很长，为了减少IO操作的次数，文件通常使用缓冲区（有足够多的数据才进行系统调用）。
    文件的缓冲行为：全缓冲、行缓冲、无缓冲。
    全缓冲：open函数的buffering设置为大于1的整数n，n为缓冲区大小
    行缓冲：open函数的buffering设置为1
    无缓冲：设置为0

    如何将文件映射到内存
    1. 在访问某些二进制文件时，希望能把文件映射到内存中，可以实现随机访问（framebuffer设备文件
    2. 某些嵌入式设备，寄存器被编址到内存地址空间，我们可以映射到/dev/mem某范围，去访问这些寄存器
    3. 如果多个进程映射同一个文件，还可以实现进程通信的目的。
    使用标准库中mmap模块的mmap()函数，它需要一个打开的文件描述符作为参考


    如何访问文件的状态
    1. 文件的类型（普通文件、目录、符号连接、设备文件……）
    2. 文件的访问权限
    3. 文件的最后访问、修改、节点状态更新时间
    4. 普通文件的大小

    系统调用：标准库中的os模块下的三个系统调用stat、fstat、lstat获取文件状态
    快捷函数：标准库中os.path下的一些函数

    临时文件
    如从传感器中采集数据，每收集1GB数据后就开始做数据分析，最终只保存分析结果
    这样很大的临时数据如果常驻内存造成资源浪费，可以使用临时文件存储这些临时数据（外部存储）。
    临时文件不用命令，且关闭后自动被删除。
    使用标准库中tempfile下的TemporallyFile，NamedTemporaryFile
"""

from tempfile import TemporaryFile, NamedTemporaryFile

# 文件系统无法找到，只能通过f调用
f = TemporaryFile()
f.write('gao x\n' * 100)
f.seek(0)
# 读取临时文件内容
s = f.read(100)
print(s)

# 可以在文件系统中找到，并且可以设置关闭后不删除，可以和其他进程共享文件内容
ntf = NamedTemporaryFile()
print(ntf.name)
